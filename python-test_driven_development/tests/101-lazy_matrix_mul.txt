>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

## Return a good result

# Only positive integer
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
array([[ 7, 10],
       [15, 22]])

# With positive and negative integer
>>> m_a = [[-1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, -4]]
>>> lazy_matrix_mul(m_a, m_b)
array([[  5, -10],
       [ 15, -10]])

# m_a is a list of lists containing NaN
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[float("NaN")], [float("NaN")]]
>>> lazy_matrix_mul(m_a, m_b)
array([[nan],
       [nan]])

# m_a is a list of lists containing inf 
>>> m_a = [[float("inf"), float("inf")], [float("inf"), float("inf")]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
array([[inf, inf],
       [inf, inf]])

# m_a is a list of lists containing inf
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[float("inf"), float("inf")], [float("inf"), float("inf")]]
>>> lazy_matrix_mul(m_a, m_b)
array([[inf, inf],
       [inf, inf]])

# mul float
>>> m_a = [[1.0, 2.0], [3.0, 4]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
array([[ 7., 10.],
       [15., 22.]])

# mul float with negative
>>> m_a = [[1.0, 2.0], [3.0, -4.0]]
>>> m_b = [[1, -2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
array([[  7.,   6.],
       [ -9., -22.]])

# m_a and m_b are both 1x1 matrices
>>> m_a = [[2]]
>>> m_b = [[3]]
>>> lazy_matrix_mul(m_a, m_b)
array([[6]])

# Only 0
>>> m_a = [[0, 0], [0, 0]]
>>> m_b = [[0, 0], [0, 0]]
>>> lazy_matrix_mul(m_a, m_b)
array([[0, 0],
       [0, 0]])

# m_a is a tuple
>>> m_a = ([1, 2], [3, 4])
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
array([[ 7, 10],
       [15, 22]])

# m_b is a tuple
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = ([1, 2], [3, 4])
>>> lazy_matrix_mul(m_a, m_b)
array([[ 7, 10],
       [15, 22]])

# m_a is a list of tuples
>>> m_a = [(1, 2), (3, 4)]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
array([[ 7, 10],
       [15, 22]])

# m_b is a list of tuples
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [(1, 2), (3, 4)]
>>> lazy_matrix_mul(m_a, m_b)
array([[ 7, 10],
       [15, 22]])

# m_a is a string
>>> m_a = "[[1, 2], [3, 4]]"
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
numpy._core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U16'), dtype('int64')) -> None

# m_b is not a list
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = "[[1, 2], [3, 4]]"
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
numpy._core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U16')) -> None

# m_a is an integer
>>> m_a = 1
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 0 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

# m_b is not a list
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = 1
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

# m_a is an empty list
>>> m_a = []
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

# m_b is an empty list
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = []
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 0 is different from 2)

# m_a is an empty list of list
>>> m_a = [[]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

# m_b is an empty list of list
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)

# m_a is a list of lists containing string
>>> m_a = [["Yooo"], ["Yaaa"]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
numpy._core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U4'), dtype('int64')) -> None

# m_a is a list of lists containing string
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [["oooY"], ["aaaY"]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
numpy._core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U4')) -> None

# m_a's row has not the same size
>>> m_a = [[1, 2], [3, 4, 5]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

# m_b's row has not the same size
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, 4, 5]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

# m_a columns must be equal to m_b
>>> m_a = [[1, 2], [3, 4], [5, 6]]
>>> m_b = [[1, 2]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)

# m_a is a list of lists containing NaN
>>> m_a = [[float("NaN")], [float("NaN")]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 1)

# m_a is a list of lists containing None
>>> m_a = [[None], [None]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 1)

# m_a is a list of lists containing None
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[None], [None]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ___
TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'

# No args
>>> lazy_matrix_mul()
Traceback (most recent call last):
 ---
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

# m_a and m_b are integers
>>> lazy_matrix_mul(6, 2)
Traceback (most recent call last):
 ---
ValueError: matmul: Input operand 0 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

# Mixed type
>>> m_a = [[89, "Turtle"], [878, 7]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
 ---
numpy._core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U21'), dtype('int64')) -> None
